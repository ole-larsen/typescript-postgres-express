version: '3.7'
services:
  app001-frontend:
    container_name: app001-frontend
    build:
      context: application
      args:
        NODE_ENV: 'production'
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/vhosts:/etc/nginx/conf.d
      - ./docker/nginx/logs:/var/log/nginx
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./docker/certbot-etc:/etc/letsencrypt
      - ./docker/certbot-var:/var/lib/letsencrypt
      - ./docker/dhparam:/etc/ssl/certs
      - /var/www/node_modules
      - .env:/var/www/application/.env:ro
    environment:
      DOMAIN: "localhost"
      NODE_ENV: "production"
      SERVER_PORT: "3010"
    links:
      - app001-backend:app001-backend
      - app001-provider:app001-provider
    networks:
      - service-web
    restart: always
  app001-backend:
    container_name: app001-backend
    build:
      context: .
      args:
        NODE_ENV: 'production'
        SERVER_PORT: 3010
    ports:
      - 3010:3010
    networks:
      - service-web
    restart: always
    links:
      - app001-provider:app001-provider
      - app001-postgres:app001-postgres
      - app001-redis:app001-redis
    depends_on:
      - app001-provider
      - app001-postgres
    volumes:
      - ./docker/certbot-etc:/etc/letsencrypt
      - ./docker/certbot-var:/var/lib/letsencrypt
      - /server/node_modules
    env_file:
      - .env
  app001-provider:
    container_name: app001-provider
    build:
      context: ./provider/.
      args:
        NODE_ENV: "production"
        PORT: 5551
    env_file:
      - .env
    ports:
      - 5551:5551
    networks:
      - service-web
    restart: always
    volumes:
      - .env:/go/src/provider/.env:ro
  app001-redis:
    image: redis
    container_name: app001-redis
    ports:
      - 6380:6379
    networks:
      - service-web
  app001-mongo:
    image: mongo
    container_name: app001-mongo
    # command: mongod --dbpath /data/db --repair
    ports:
      - 27018:27017
    networks:
      - service-web
  app001-postgres:
    image: timescale/timescaledb:2.5.1-pg14
    container_name: app001-postgres
    environment:
      - POSTGRES_USER=services
      - POSTGRES_PASSWORD=services
      - POSTGRES_DB=services
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - ${DATABASE_PORT}:${DATABASE_PORT}
    healthcheck:
      test: [ "CMD", "pg_isready" , "-U", "trade" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - service-web
networks:
  service-web:
    name: service-web
    driver: bridge
